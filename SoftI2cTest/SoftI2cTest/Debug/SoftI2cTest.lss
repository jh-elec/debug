
SoftI2cTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000172  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056d  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040e  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  74:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <I2cSoftInit>:




void I2cSoftInit( tI2c *Object ) 
{
  7c:	fc 01       	movw	r30, r24
	__PORT_DDR__( Object->Port ) |= ( 1 << Object->Scl ); // Scl als Ausgang konfigurieren
  7e:	a0 81       	ld	r26, Z
  80:	b1 81       	ldd	r27, Z+1	; 0x01
  82:	4e 91       	ld	r20, -X
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	c9 01       	movw	r24, r18
  8a:	02 80       	ldd	r0, Z+2	; 0x02
  8c:	02 c0       	rjmp	.+4      	; 0x92 <I2cSoftInit+0x16>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <I2cSoftInit+0x12>
  96:	84 2b       	or	r24, r20
  98:	8c 93       	st	X, r24
	__PORT_DDR__( Object->Port ) |= ( 1 << Object->Sda ); // Sda als Ausgang konfigurieren
  9a:	a0 81       	ld	r26, Z
  9c:	b1 81       	ldd	r27, Z+1	; 0x01
  9e:	4e 91       	ld	r20, -X
  a0:	c9 01       	movw	r24, r18
  a2:	03 80       	ldd	r0, Z+3	; 0x03
  a4:	02 c0       	rjmp	.+4      	; 0xaa <I2cSoftInit+0x2e>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	0a 94       	dec	r0
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <I2cSoftInit+0x2a>
  ae:	84 2b       	or	r24, r20
  b0:	8c 93       	st	X, r24
	
	*Object->Port |= ( 1 << Object->Scl ); // Default Pegel einstellen
  b2:	a0 81       	ld	r26, Z
  b4:	b1 81       	ldd	r27, Z+1	; 0x01
  b6:	4c 91       	ld	r20, X
  b8:	c9 01       	movw	r24, r18
  ba:	02 80       	ldd	r0, Z+2	; 0x02
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <I2cSoftInit+0x46>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <I2cSoftInit+0x42>
  c6:	84 2b       	or	r24, r20
  c8:	8c 93       	st	X, r24
	*Object->Port |= ( 1 << Object->Sda ); // ..	
  ca:	a0 81       	ld	r26, Z
  cc:	b1 81       	ldd	r27, Z+1	; 0x01
  ce:	8c 91       	ld	r24, X
  d0:	03 80       	ldd	r0, Z+3	; 0x03
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <I2cSoftInit+0x5c>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <I2cSoftInit+0x58>
  dc:	28 2b       	or	r18, r24
  de:	2c 93       	st	X, r18
  e0:	08 95       	ret

000000e2 <main>:

tI2c SoftI2c;

int main(void)
{
	SoftI2c.Port = &PORTC;
  e2:	e0 e6       	ldi	r30, 0x60	; 96
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	85 e3       	ldi	r24, 0x35	; 53
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	80 83       	st	Z, r24
	SoftI2c.Scl = 1<<PC0;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	82 83       	std	Z+2, r24	; 0x02
	SoftI2c.Sda = 1<<PC1;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	83 83       	std	Z+3, r24	; 0x03
	I2cSoftInit( &SoftI2c );
  f6:	cf 01       	movw	r24, r30
  f8:	0e 94 3e 00 	call	0x7c	; 0x7c <I2cSoftInit>

	
	
    while (1) 
    {
 		*SoftI2c.Port |=  (1<<SoftI2c.Scl);
  fc:	e0 e6       	ldi	r30, 0x60	; 96
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	a0 81       	ld	r26, Z
 106:	b1 81       	ldd	r27, Z+1	; 0x01
 108:	4c 91       	ld	r20, X
 10a:	9c 01       	movw	r18, r24
 10c:	02 80       	ldd	r0, Z+2	; 0x02
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x32>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	0a 94       	dec	r0
 116:	e2 f7       	brpl	.-8      	; 0x110 <main+0x2e>
 118:	24 2b       	or	r18, r20
 11a:	2c 93       	st	X, r18
		*SoftI2c.Port |=  (1<<SoftI2c.Sda);
 11c:	a0 81       	ld	r26, Z
 11e:	b1 81       	ldd	r27, Z+1	; 0x01
 120:	4c 91       	ld	r20, X
 122:	9c 01       	movw	r18, r24
 124:	03 80       	ldd	r0, Z+3	; 0x03
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x4a>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <main+0x46>
 130:	24 2b       	or	r18, r20
 132:	2c 93       	st	X, r18
		 
 		*SoftI2c.Port &= ~(1<<SoftI2c.Scl);
 134:	a0 81       	ld	r26, Z
 136:	b1 81       	ldd	r27, Z+1	; 0x01
 138:	3c 91       	ld	r19, X
 13a:	ac 01       	movw	r20, r24
 13c:	02 80       	ldd	r0, Z+2	; 0x02
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0x62>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0x5e>
 148:	24 2f       	mov	r18, r20
 14a:	20 95       	com	r18
 14c:	23 23       	and	r18, r19
 14e:	2c 93       	st	X, r18
		*SoftI2c.Port &= ~(1<<SoftI2c.Sda);
 150:	a0 81       	ld	r26, Z
 152:	b1 81       	ldd	r27, Z+1	; 0x01
 154:	3c 91       	ld	r19, X
 156:	ac 01       	movw	r20, r24
 158:	03 80       	ldd	r0, Z+3	; 0x03
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0x7e>
 15c:	44 0f       	add	r20, r20
 15e:	55 1f       	adc	r21, r21
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <main+0x7a>
 164:	24 2f       	mov	r18, r20
 166:	20 95       	com	r18
 168:	23 23       	and	r18, r19
 16a:	2c 93       	st	X, r18
 16c:	cb cf       	rjmp	.-106    	; 0x104 <main+0x22>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
