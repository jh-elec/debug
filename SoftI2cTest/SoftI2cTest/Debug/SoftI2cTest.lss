
SoftI2cTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095d  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000659  00000000  00000000  00000be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a4  00000000  00000000  0000123a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000352  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001cf5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 90 00 	call	0x120	; 0x120 <main>
  74:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <I2cSoftInit>:
#include "i2csoft.h"


void I2cSoftInit( void ) 
{	
	_I2C_PORT &= ( ( 1<<_I2C_SCL_BP ) | ( 1<<_I2C_SDA_BP ) );
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	83 70       	andi	r24, 0x03	; 3
  80:	85 bb       	out	0x15, r24	; 21
	
	_I2C_PORT_SDA_HIGH;
  82:	a1 98       	cbi	0x14, 1	; 20
	_I2C_PORT_SCL_HIGH;
  84:	a0 98       	cbi	0x14, 0	; 20
  86:	08 95       	ret

00000088 <I2cSoftStart>:
}

void I2cSoftStart( void )
{
	_I2C_PORT_SCL_HIGH;
  88:	a0 98       	cbi	0x14, 0	; 20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	fc 01       	movw	r30, r24
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <I2cSoftStart+0x8>
	H_DEL;
	
	_I2C_PORT_SDA_LOW;
  94:	a1 9a       	sbi	0x14, 1	; 20
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <I2cSoftStart+0xe>
  9a:	08 95       	ret

0000009c <I2cSoftStop>:
	H_DEL;
}

void I2cSoftStop( void )
{
	_I2C_PORT_SDA_LOW;
  9c:	a1 9a       	sbi	0x14, 1	; 20
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	fc 01       	movw	r30, r24
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <I2cSoftStop+0x8>
	H_DEL;
	
	_I2C_PORT_SCL_HIGH;
  a8:	a0 98       	cbi	0x14, 0	; 20
  aa:	fc 01       	movw	r30, r24
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <I2cSoftStop+0x10>
	Q_DEL;
	
	_I2C_PORT_SDA_HIGH;
  b0:	a1 98       	cbi	0x14, 1	; 20
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <I2cSoftStop+0x16>
  b6:	08 95       	ret

000000b8 <I2cSoftWrite>:
	H_DEL;
}

uint8_t I2cSoftWrite( uint8_t Data )
{
  b8:	98 e0       	ldi	r25, 0x08	; 8
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
	static uint8_t Acknowledge = 0;
	uint8_t ui;
	
	for ( ui = 0 ; ui < 8 ; ui++ )
	{
		_I2C_PORT_SCL_LOW;
  be:	a0 9a       	sbi	0x14, 0	; 20
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <I2cSoftWrite+0xa>
		Q_DEL;
		
		if ( Data & 0x80 )
  c6:	88 23       	and	r24, r24
  c8:	14 f4       	brge	.+4      	; 0xce <I2cSoftWrite+0x16>
		{
			_I2C_PORT_SDA_HIGH;
  ca:	a1 98       	cbi	0x14, 1	; 20
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <I2cSoftWrite+0x18>
		}else
		{
			_I2C_PORT_SDA_LOW;
  ce:	a1 9a       	sbi	0x14, 1	; 20
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <I2cSoftWrite+0x1a>
		}
		
		H_DEL;
		_I2C_PORT_SCL_HIGH;
  d6:	a0 98       	cbi	0x14, 0	; 20
  d8:	f9 01       	movw	r30, r18
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <I2cSoftWrite+0x22>
		H_DEL;
		
 		while ( ( __PORT_PIN__( &_I2C_PORT ) & ( 1<<_I2C_SCL_BP ) ) == 0 ); // Warten bis "Scl" Low..
  de:	98 9b       	sbis	0x13, 0	; 19
  e0:	fe cf       	rjmp	.-4      	; 0xde <I2cSoftWrite+0x26>
		
		Data <<= 1;
  e2:	88 0f       	add	r24, r24
  e4:	91 50       	subi	r25, 0x01	; 1
uint8_t I2cSoftWrite( uint8_t Data )
{
	static uint8_t Acknowledge = 0;
	uint8_t ui;
	
	for ( ui = 0 ; ui < 8 ; ui++ )
  e6:	59 f7       	brne	.-42     	; 0xbe <I2cSoftWrite+0x6>
		
		Data <<= 1;
	}


	_I2C_PORT_SCL_LOW; // Ack Bestätigung
  e8:	a0 9a       	sbi	0x14, 0	; 20
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <I2cSoftWrite+0x38>
	Q_DEL;
	
	_I2C_PORT_SDA_HIGH;
  f4:	a1 98       	cbi	0x14, 1	; 20
  f6:	fc 01       	movw	r30, r24
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <I2cSoftWrite+0x40>
	H_DEL;
	
	_I2C_PORT_SCL_HIGH;
  fc:	a0 98       	cbi	0x14, 0	; 20
  fe:	fc 01       	movw	r30, r24
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <I2cSoftWrite+0x48>
	H_DEL;
		
	Acknowledge = !( __PORT_PIN__( &_I2C_PORT ) & ( 1<<_I2C_SDA_BP ) );
 104:	23 b3       	in	r18, 0x13	; 19
 106:	21 fb       	bst	r18, 1
 108:	33 27       	eor	r19, r19
 10a:	30 f9       	bld	r19, 0
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	23 27       	eor	r18, r19
 110:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <_edata>
	
	_I2C_PORT_SCL_LOW;
 114:	a0 9a       	sbi	0x14, 0	; 20
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <I2cSoftWrite+0x5e>
	H_DEL;
	
	return Acknowledge;	
}
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11e:	08 95       	ret

00000120 <main>:
#include "i2csoft.h"
#include <avr/io.h>

int main(void)
{
	I2cSoftInit();
 120:	0e 94 3e 00 	call	0x7c	; 0x7c <I2cSoftInit>
		
    while (1) 
    {
 		I2cSoftStart( );
 124:	0e 94 44 00 	call	0x88	; 0x88 <I2cSoftStart>
 		I2cSoftWrite( 0xA2 ); // Slave Adresse
 128:	82 ea       	ldi	r24, 0xA2	; 162
 12a:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2cSoftWrite>
		I2cSoftWrite( 13 );
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2cSoftWrite>
 		I2cSoftWrite( 0x83 );
 134:	83 e8       	ldi	r24, 0x83	; 131
 136:	0e 94 5c 00 	call	0xb8	; 0xb8 <I2cSoftWrite>
 		I2cSoftStop( );
 13a:	0e 94 4e 00 	call	0x9c	; 0x9c <I2cSoftStop>
 13e:	f2 cf       	rjmp	.-28     	; 0x124 <main+0x4>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
