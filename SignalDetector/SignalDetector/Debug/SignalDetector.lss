
SignalDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800106  00800106  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac5  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00000f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044f  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003eb  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 81 00 	call	0x102	; 0x102 <main>
  9e:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InputCompareInit>:
	+	TCCR1A and the TCCR1B Register), the ICP1 is disconnected and consequently the Input Capture
	+	function is disabled.
	*/	
	
	#if ( DETECTING_EDGE == RISING )
	TCCR1B |= ((1<<ICES1) | Timer1Prescaler[TIMER1_PRESCALER_1]); // Bei steigender Flanke triggern ; Prescaler einstellen
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Timer1Prescaler>
  b0:	89 2b       	or	r24, r25
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	+	• Bit 5 – TICIE1: Timer/Counter1, Input Capture Interrupt Enable
	+	When this bit is written to one, and the I-flag in the Status Register is set (interrupts globally
	+	enabled), the Timer/Counter1 Input Capture Interrupt is enabled. The corresponding Interrupt
	+	Vector (See “Interrupts” on page 44.) is executed when the ICF1 Flag, located in TIFR, is set.
	*/
	TIMSK1 |= (1<<ICIE1); // Input Capture Interrupt aktivieren
  b6:	ef e6       	ldi	r30, 0x6F	; 111
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	80 83       	st	Z, r24
	
	sei(); // Interrupts aktivieren	
  c0:	78 94       	sei
  c2:	08 95       	ret

000000c4 <__vector_10>:
}


ISR(TIMER1_CAPT_vect)
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	Signal.b0 = 1; // Es kommt ein neues Signal rein.. Zähler fängt in der main an zu zählen
  d4:	ef e1       	ldi	r30, 0x1F	; 31
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
	Signal.Beginn = 0;
  de:	e6 e0       	ldi	r30, 0x06	; 6
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	15 8a       	std	Z+21, r1	; 0x15
  e4:	16 8a       	std	Z+22, r1	; 0x16
  e6:	17 8a       	std	Z+23, r1	; 0x17
  e8:	10 8e       	std	Z+24, r1	; 0x18
	Signal.uiIndex++;
  ea:	84 89       	ldd	r24, Z+20	; 0x14
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	84 8b       	std	Z+20, r24	; 0x14
	
	#ifdef _DEBUG_
	DEBUG_LED_PORT |= (1<<DEBUG_LED_BP);
  f0:	2d 9a       	sbi	0x05, 5	; 5
	#endif
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <main>:


int main(void)
{
	DEBUG_LED_DDR		|= (1<<DEBUG_LED_BP);
 102:	25 9a       	sbi	0x04, 5	; 4
	SIGNAL_ANNAHME_DDR	|= (1<<SIGNAL_ANNAHME_BP);
 104:	24 9a       	sbi	0x04, 4	; 4
	SIGNAL_KLINGEL_DDR	|= (1<<SIGNAL_KLINGEL_BP);
 106:	22 9a       	sbi	0x04, 2	; 4
	SIGNAL_SPERREN_DDR	|= (1<<SIGNAL_SPERREN_BP);
 108:	23 9a       	sbi	0x04, 3	; 4
		
	/*	Input Compare für Flankenzählung konfigurieren
	*/
	InputCompareInit();
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <InputCompareInit>
	
	/*	Struktur initalisieren
	*/
	memset( (Pulse_t*)&Signal , 0 , sizeof(Pulse_t) );
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	e6 e0       	ldi	r30, 0x06	; 6
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	df 01       	movw	r26, r30
 116:	1d 92       	st	X+, r1
 118:	8a 95       	dec	r24
 11a:	e9 f7       	brne	.-6      	; 0x116 <main+0x14>
 11c:	8a e0       	ldi	r24, 0x0A	; 10
	
	for ( uint8_t i = 0 ; i < 10 ; i++ )
	{
		SIGNAL_SPERREN_PORT |= (1<<SIGNAL_SPERREN_BP);
 11e:	2b 9a       	sbi	0x05, 3	; 5
		SIGNAL_ANNAHME_PORT |= (1<<SIGNAL_ANNAHME_BP);
 120:	2c 9a       	sbi	0x05, 4	; 5
		SIGNAL_KLINGEL_PORT |= (1<<SIGNAL_KLINGEL_BP);
 122:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	bf e7       	ldi	r27, 0x7F	; 127
 126:	e8 e3       	ldi	r30, 0x38	; 56
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	b1 50       	subi	r27, 0x01	; 1
 12c:	e0 40       	sbci	r30, 0x00	; 0
 12e:	f0 40       	sbci	r31, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x32>
 134:	00 00       	nop
		_delay_ms(25);
		SIGNAL_SPERREN_PORT &= ~(1<<SIGNAL_SPERREN_BP);
 136:	2b 98       	cbi	0x05, 3	; 5
		SIGNAL_ANNAHME_PORT &= ~(1<<SIGNAL_ANNAHME_BP);
 138:	2c 98       	cbi	0x05, 4	; 5
		SIGNAL_KLINGEL_PORT &= ~(1<<SIGNAL_KLINGEL_BP);
 13a:	2a 98       	cbi	0x05, 2	; 5
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	31 ee       	ldi	r19, 0xE1	; 225
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	21 50       	subi	r18, 0x01	; 1
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x40>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x4a>
 14c:	00 00       	nop
 14e:	81 50       	subi	r24, 0x01	; 1
	
	/*	Struktur initalisieren
	*/
	memset( (Pulse_t*)&Signal , 0 , sizeof(Pulse_t) );
	
	for ( uint8_t i = 0 ; i < 10 ; i++ )
 150:	31 f7       	brne	.-52     	; 0x11e <main+0x1c>
		_delay_ms(100);
	}
	
    while (1) 
    {
		if ( Signal.b0 )
 152:	cf e1       	ldi	r28, 0x1F	; 31
 154:	d1 e0       	ldi	r29, 0x01	; 1
		{
			if ( Signal.Beginn++ >= 30e3 )
 156:	06 e0       	ldi	r16, 0x06	; 6
 158:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(100);
	}
	
    while (1) 
    {
		if ( Signal.b0 )
 15a:	88 81       	ld	r24, Y
 15c:	80 ff       	sbrs	r24, 0
 15e:	fd cf       	rjmp	.-6      	; 0x15a <main+0x58>
		{
			if ( Signal.Beginn++ >= 30e3 )
 160:	d8 01       	movw	r26, r16
 162:	55 96       	adiw	r26, 0x15	; 21
 164:	6d 91       	ld	r22, X+
 166:	7d 91       	ld	r23, X+
 168:	8d 91       	ld	r24, X+
 16a:	9c 91       	ld	r25, X
 16c:	58 97       	sbiw	r26, 0x18	; 24
 16e:	6b 01       	movw	r12, r22
 170:	7c 01       	movw	r14, r24
 172:	bf ef       	ldi	r27, 0xFF	; 255
 174:	cb 1a       	sub	r12, r27
 176:	db 0a       	sbc	r13, r27
 178:	eb 0a       	sbc	r14, r27
 17a:	fb 0a       	sbc	r15, r27
 17c:	f8 01       	movw	r30, r16
 17e:	c5 8a       	std	Z+21, r12	; 0x15
 180:	d6 8a       	std	Z+22, r13	; 0x16
 182:	e7 8a       	std	Z+23, r14	; 0x17
 184:	f0 8e       	std	Z+24, r15	; 0x18
 186:	0e 94 4c 01 	call	0x298	; 0x298 <__floatunsisf>
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e6       	ldi	r19, 0x60	; 96
 18e:	4a ee       	ldi	r20, 0xEA	; 234
 190:	56 e4       	ldi	r21, 0x46	; 70
 192:	0e 94 89 01 	call	0x312	; 0x312 <__gesf2>
 196:	88 23       	and	r24, r24
 198:	04 f3       	brlt	.-64     	; 0x15a <main+0x58>
			{
				Signal.b0 = 0;
 19a:	88 81       	ld	r24, Y
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	88 83       	st	Y, r24
				Signal.Beginn = 0;
 1a0:	d8 01       	movw	r26, r16
 1a2:	55 96       	adiw	r26, 0x15	; 21
 1a4:	1d 92       	st	X+, r1
 1a6:	1d 92       	st	X+, r1
 1a8:	1d 92       	st	X+, r1
 1aa:	1c 92       	st	X, r1
 1ac:	58 97       	sbiw	r26, 0x18	; 24
				
				uint8_t Edges = Signal.uiIndex; // Aktuelle Anzahl an Flanken merken
 1ae:	54 96       	adiw	r26, 0x14	; 20
 1b0:	8c 91       	ld	r24, X
							
				if ( Edges == 11 )// Signal -> Anlage sperren
 1b2:	8b 30       	cpi	r24, 0x0B	; 11
 1b4:	c1 f4       	brne	.+48     	; 0x1e6 <main+0xe4>
				{
					SIGNAL_SPERREN_PORT |= (1<<SIGNAL_SPERREN_BP);
 1b6:	2b 9a       	sbi	0x05, 3	; 5
 1b8:	bf ef       	ldi	r27, 0xFF	; 255
 1ba:	e9 e6       	ldi	r30, 0x69	; 105
 1bc:	f8 e1       	ldi	r31, 0x18	; 24
 1be:	b1 50       	subi	r27, 0x01	; 1
 1c0:	e0 40       	sbci	r30, 0x00	; 0
 1c2:	f0 40       	sbci	r31, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xbc>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xc6>
 1c8:	00 00       	nop
					_delay_ms(500);
					SIGNAL_SPERREN_PORT &= ~(1<<SIGNAL_SPERREN_BP);
 1ca:	2b 98       	cbi	0x05, 3	; 5
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	39 e6       	ldi	r19, 0x69	; 105
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0xd0>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0xda>
 1dc:	00 00       	nop
					_delay_ms(500);
					Signal.uiIndex = 0;
 1de:	d8 01       	movw	r26, r16
 1e0:	54 96       	adiw	r26, 0x14	; 20
 1e2:	1c 92       	st	X, r1
 1e4:	ba cf       	rjmp	.-140    	; 0x15a <main+0x58>
				} else if	( Edges == 14 )// Signal -> Annahme
 1e6:	8e 30       	cpi	r24, 0x0E	; 14
 1e8:	c1 f4       	brne	.+48     	; 0x21a <main+0x118>
				{
					SIGNAL_ANNAHME_PORT |= (1<<SIGNAL_ANNAHME_BP);
 1ea:	2c 9a       	sbi	0x05, 4	; 5
 1ec:	bf ef       	ldi	r27, 0xFF	; 255
 1ee:	e9 e6       	ldi	r30, 0x69	; 105
 1f0:	f8 e1       	ldi	r31, 0x18	; 24
 1f2:	b1 50       	subi	r27, 0x01	; 1
 1f4:	e0 40       	sbci	r30, 0x00	; 0
 1f6:	f0 40       	sbci	r31, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xf0>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xfa>
 1fc:	00 00       	nop
					_delay_ms(500);
					SIGNAL_ANNAHME_PORT &= ~(1<<SIGNAL_ANNAHME_BP);
 1fe:	2c 98       	cbi	0x05, 4	; 5
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	39 e6       	ldi	r19, 0x69	; 105
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	21 50       	subi	r18, 0x01	; 1
 208:	30 40       	sbci	r19, 0x00	; 0
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x104>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0x10e>
 210:	00 00       	nop
					_delay_ms(500);
					Signal.uiIndex = 0;
 212:	d8 01       	movw	r26, r16
 214:	54 96       	adiw	r26, 0x14	; 20
 216:	1c 92       	st	X, r1
 218:	a0 cf       	rjmp	.-192    	; 0x15a <main+0x58>
				} else if	( Edges >= 15 && Edges <= 17 )// Signal -> Klingel
 21a:	8f 50       	subi	r24, 0x0F	; 15
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	c0 f4       	brcc	.+48     	; 0x250 <main+0x14e>
				{
					SIGNAL_KLINGEL_PORT |= (1<<SIGNAL_KLINGEL_BP);
 220:	2a 9a       	sbi	0x05, 2	; 5
 222:	bf ef       	ldi	r27, 0xFF	; 255
 224:	e9 e6       	ldi	r30, 0x69	; 105
 226:	f8 e1       	ldi	r31, 0x18	; 24
 228:	b1 50       	subi	r27, 0x01	; 1
 22a:	e0 40       	sbci	r30, 0x00	; 0
 22c:	f0 40       	sbci	r31, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x126>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x130>
 232:	00 00       	nop
					_delay_ms(500);
					SIGNAL_KLINGEL_PORT &= ~(1<<SIGNAL_KLINGEL_BP);
 234:	2a 98       	cbi	0x05, 2	; 5
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	39 e6       	ldi	r19, 0x69	; 105
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	30 40       	sbci	r19, 0x00	; 0
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x13a>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x144>
 246:	00 00       	nop
					_delay_ms(500);
					Signal.uiIndex = 0;
 248:	d8 01       	movw	r26, r16
 24a:	54 96       	adiw	r26, 0x14	; 20
 24c:	1c 92       	st	X, r1
 24e:	85 cf       	rjmp	.-246    	; 0x15a <main+0x58>
				}
				else
				{
					Signal.uiIndex = 0;
 250:	f8 01       	movw	r30, r16
 252:	14 8a       	std	Z+20, r1	; 0x14
 254:	8a e0       	ldi	r24, 0x0A	; 10
					for ( uint8_t i = 0 ; i < 10 ; i++ )
					{
						DEBUG_LED_PORT &= ~(1<<DEBUG_LED_BP);
 256:	2d 98       	cbi	0x05, 5	; 5
						SIGNAL_SPERREN_PORT &= ~(1<<SIGNAL_SPERREN_BP);
 258:	2b 98       	cbi	0x05, 3	; 5
						SIGNAL_ANNAHME_PORT &= ~(1<<SIGNAL_ANNAHME_BP);
 25a:	2c 98       	cbi	0x05, 4	; 5
						SIGNAL_KLINGEL_PORT &= ~(1<<SIGNAL_KLINGEL_BP);
 25c:	2a 98       	cbi	0x05, 2	; 5
 25e:	ff ef       	ldi	r31, 0xFF	; 255
 260:	21 ee       	ldi	r18, 0xE1	; 225
 262:	34 e0       	ldi	r19, 0x04	; 4
 264:	f1 50       	subi	r31, 0x01	; 1
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	30 40       	sbci	r19, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x162>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x16c>
 26e:	00 00       	nop
						_delay_ms(100);
						DEBUG_LED_PORT |= (1<<DEBUG_LED_BP);
 270:	2d 9a       	sbi	0x05, 5	; 5
						SIGNAL_SPERREN_PORT |= (1<<SIGNAL_SPERREN_BP);
 272:	2b 9a       	sbi	0x05, 3	; 5
						SIGNAL_ANNAHME_PORT |= (1<<SIGNAL_ANNAHME_BP);
 274:	2c 9a       	sbi	0x05, 4	; 5
						SIGNAL_KLINGEL_PORT |= (1<<SIGNAL_KLINGEL_BP);					
 276:	2a 9a       	sbi	0x05, 2	; 5
 278:	9f e7       	ldi	r25, 0x7F	; 127
 27a:	a8 e3       	ldi	r26, 0x38	; 56
 27c:	b1 e0       	ldi	r27, 0x01	; 1
 27e:	91 50       	subi	r25, 0x01	; 1
 280:	a0 40       	sbci	r26, 0x00	; 0
 282:	b0 40       	sbci	r27, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x17c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x186>
 288:	00 00       	nop
 28a:	81 50       	subi	r24, 0x01	; 1
					Signal.uiIndex = 0;
				}
				else
				{
					Signal.uiIndex = 0;
					for ( uint8_t i = 0 ; i < 10 ; i++ )
 28c:	21 f7       	brne	.-56     	; 0x256 <main+0x154>
						SIGNAL_SPERREN_PORT |= (1<<SIGNAL_SPERREN_BP);
						SIGNAL_ANNAHME_PORT |= (1<<SIGNAL_ANNAHME_BP);
						SIGNAL_KLINGEL_PORT |= (1<<SIGNAL_KLINGEL_BP);					
						_delay_ms(25);
					}
						DEBUG_LED_PORT &= ~(1<<DEBUG_LED_BP);
 28e:	2d 98       	cbi	0x05, 5	; 5
						SIGNAL_SPERREN_PORT &= ~(1<<SIGNAL_SPERREN_BP);
 290:	2b 98       	cbi	0x05, 3	; 5
						SIGNAL_ANNAHME_PORT &= ~(1<<SIGNAL_ANNAHME_BP);
 292:	2c 98       	cbi	0x05, 4	; 5
						SIGNAL_KLINGEL_PORT &= ~(1<<SIGNAL_KLINGEL_BP);
 294:	2a 98       	cbi	0x05, 2	; 5
 296:	61 cf       	rjmp	.-318    	; 0x15a <main+0x58>

00000298 <__floatunsisf>:
 298:	e8 94       	clt
 29a:	09 c0       	rjmp	.+18     	; 0x2ae <__floatsisf+0x12>

0000029c <__floatsisf>:
 29c:	97 fb       	bst	r25, 7
 29e:	3e f4       	brtc	.+14     	; 0x2ae <__floatsisf+0x12>
 2a0:	90 95       	com	r25
 2a2:	80 95       	com	r24
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	99 23       	and	r25, r25
 2b0:	a9 f0       	breq	.+42     	; 0x2dc <__floatsisf+0x40>
 2b2:	f9 2f       	mov	r31, r25
 2b4:	96 e9       	ldi	r25, 0x96	; 150
 2b6:	bb 27       	eor	r27, r27
 2b8:	93 95       	inc	r25
 2ba:	f6 95       	lsr	r31
 2bc:	87 95       	ror	r24
 2be:	77 95       	ror	r23
 2c0:	67 95       	ror	r22
 2c2:	b7 95       	ror	r27
 2c4:	f1 11       	cpse	r31, r1
 2c6:	f8 cf       	rjmp	.-16     	; 0x2b8 <__floatsisf+0x1c>
 2c8:	fa f4       	brpl	.+62     	; 0x308 <__floatsisf+0x6c>
 2ca:	bb 0f       	add	r27, r27
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <__floatsisf+0x36>
 2ce:	60 ff       	sbrs	r22, 0
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <__floatsisf+0x6c>
 2d2:	6f 5f       	subi	r22, 0xFF	; 255
 2d4:	7f 4f       	sbci	r23, 0xFF	; 255
 2d6:	8f 4f       	sbci	r24, 0xFF	; 255
 2d8:	9f 4f       	sbci	r25, 0xFF	; 255
 2da:	16 c0       	rjmp	.+44     	; 0x308 <__floatsisf+0x6c>
 2dc:	88 23       	and	r24, r24
 2de:	11 f0       	breq	.+4      	; 0x2e4 <__floatsisf+0x48>
 2e0:	96 e9       	ldi	r25, 0x96	; 150
 2e2:	11 c0       	rjmp	.+34     	; 0x306 <__floatsisf+0x6a>
 2e4:	77 23       	and	r23, r23
 2e6:	21 f0       	breq	.+8      	; 0x2f0 <__floatsisf+0x54>
 2e8:	9e e8       	ldi	r25, 0x8E	; 142
 2ea:	87 2f       	mov	r24, r23
 2ec:	76 2f       	mov	r23, r22
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <__floatsisf+0x5e>
 2f0:	66 23       	and	r22, r22
 2f2:	71 f0       	breq	.+28     	; 0x310 <__floatsisf+0x74>
 2f4:	96 e8       	ldi	r25, 0x86	; 134
 2f6:	86 2f       	mov	r24, r22
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	2a f0       	brmi	.+10     	; 0x308 <__floatsisf+0x6c>
 2fe:	9a 95       	dec	r25
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	88 1f       	adc	r24, r24
 306:	da f7       	brpl	.-10     	; 0x2fe <__floatsisf+0x62>
 308:	88 0f       	add	r24, r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	97 f9       	bld	r25, 7
 310:	08 95       	ret

00000312 <__gesf2>:
 312:	0e 94 8e 01 	call	0x31c	; 0x31c <__fp_cmp>
 316:	08 f4       	brcc	.+2      	; 0x31a <__gesf2+0x8>
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	08 95       	ret

0000031c <__fp_cmp>:
 31c:	99 0f       	add	r25, r25
 31e:	00 08       	sbc	r0, r0
 320:	55 0f       	add	r21, r21
 322:	aa 0b       	sbc	r26, r26
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	fe ef       	ldi	r31, 0xFE	; 254
 328:	16 16       	cp	r1, r22
 32a:	17 06       	cpc	r1, r23
 32c:	e8 07       	cpc	r30, r24
 32e:	f9 07       	cpc	r31, r25
 330:	c0 f0       	brcs	.+48     	; 0x362 <__fp_cmp+0x46>
 332:	12 16       	cp	r1, r18
 334:	13 06       	cpc	r1, r19
 336:	e4 07       	cpc	r30, r20
 338:	f5 07       	cpc	r31, r21
 33a:	98 f0       	brcs	.+38     	; 0x362 <__fp_cmp+0x46>
 33c:	62 1b       	sub	r22, r18
 33e:	73 0b       	sbc	r23, r19
 340:	84 0b       	sbc	r24, r20
 342:	95 0b       	sbc	r25, r21
 344:	39 f4       	brne	.+14     	; 0x354 <__fp_cmp+0x38>
 346:	0a 26       	eor	r0, r26
 348:	61 f0       	breq	.+24     	; 0x362 <__fp_cmp+0x46>
 34a:	23 2b       	or	r18, r19
 34c:	24 2b       	or	r18, r20
 34e:	25 2b       	or	r18, r21
 350:	21 f4       	brne	.+8      	; 0x35a <__fp_cmp+0x3e>
 352:	08 95       	ret
 354:	0a 26       	eor	r0, r26
 356:	09 f4       	brne	.+2      	; 0x35a <__fp_cmp+0x3e>
 358:	a1 40       	sbci	r26, 0x01	; 1
 35a:	a6 95       	lsr	r26
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	81 1d       	adc	r24, r1
 360:	81 1d       	adc	r24, r1
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
