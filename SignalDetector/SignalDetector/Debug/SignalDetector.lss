
SignalDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c8  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074e  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037d  00000000  00000000  00001476  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000240  00000000  00000000  00001cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InputCompareInit>:
	RISING	
} InputCompareMode_t;

void InputCompareInit( InputCompareMode_t InputCompareMode )
{	
	INPUT_CAPTURE_DDR &= ~(1<<INPUT_CAPTURE_BP);
  a6:	20 98       	cbi	0x04, 0	; 4
	INPUT_CAPTURE_PORT |= (1<<INPUT_CAPTURE_BP);
  a8:	28 9a       	sbi	0x05, 0	; 5

	if ( InputCompareMode == FALLING )
  aa:	81 11       	cpse	r24, r1
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <InputCompareInit+0x1a>
	{	
		TCCR1B |= ((1<<ICNC1) | (Timer1Prescaler[TIMER1_PRESCALER_1])); // Bei fallender Flanke triggern ; Prescaler einstellen
  ae:	e1 e8       	ldi	r30, 0x81	; 129
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Timer1Prescaler>
  b8:	89 2b       	or	r24, r25
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
  be:	0a c0       	rjmp	.+20     	; 0xd4 <InputCompareInit+0x2e>
	}else if ( InputCompareMode == RISING )
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	41 f4       	brne	.+16     	; 0xd4 <InputCompareInit+0x2e>
	{
		TCCR1B |= ( (1<<ICNC1) | (1<<ICES1) | Timer1Prescaler[TIMER1_PRESCALER_1]); // Bei steigender Flanke triggern ; Prescaler einstellen		
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Timer1Prescaler>
  ce:	89 2b       	or	r24, r25
  d0:	80 6c       	ori	r24, 0xC0	; 192
  d2:	80 83       	st	Z, r24
	}
		
	TIMSK1 |= (1<<ICIE1); // Input Capture Interrupt aktivieren
  d4:	ef e6       	ldi	r30, 0x6F	; 111
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 83       	st	Z, r24
	
	sei(); // Interrupts aktivieren	
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <__vector_10>:
}

ISR(TIMER1_CAPT_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	Signal.b0 = 1;
  f2:	ef e0       	ldi	r30, 0x0F	; 15
  f4:	f1 e0       	ldi	r31, 0x01	; 1
  f6:	80 81       	ld	r24, Z
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	80 83       	st	Z, r24
	Signal.uiIndex++;
  fc:	e6 e0       	ldi	r30, 0x06	; 6
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	80 81       	ld	r24, Z
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 83       	st	Z, r24
	
	Signal.ulBeginn = 0;
 106:	11 82       	std	Z+1, r1	; 0x01
 108:	12 82       	std	Z+2, r1	; 0x02
 10a:	13 82       	std	Z+3, r1	; 0x03
 10c:	14 82       	std	Z+4, r1	; 0x04
	Signal.ulTimeout = 0;
 10e:	15 82       	std	Z+5, r1	; 0x05
 110:	16 82       	std	Z+6, r1	; 0x06
 112:	17 82       	std	Z+7, r1	; 0x07
 114:	10 86       	std	Z+8, r1	; 0x08
	
	#ifdef _DEBUG_
		DEBUG_LED_PORT |= (1<<DEBUG_LED_BP);
 116:	2d 9a       	sbi	0x05, 5	; 5
	#endif
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:


int main(void)
{
	DEBUG_LED_DDR		|= (1<<DEBUG_LED_BP);
 128:	25 9a       	sbi	0x04, 5	; 4
	SIGNAL_ANNAHME_DDR	|= (1<<SIGNAL_ANNAHME_BP);
 12a:	24 9a       	sbi	0x04, 4	; 4
	SIGNAL_KLINGEL_DDR	|= (1<<SIGNAL_KLINGEL_BP);
 12c:	22 9a       	sbi	0x04, 2	; 4
	SIGNAL_SPERREN_DDR	|= (1<<SIGNAL_SPERREN_BP);
 12e:	23 9a       	sbi	0x04, 3	; 4
		
	/*	Input Compare für Flankenzählung konfigurieren
	*/
	InputCompareInit( FALLING );
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <InputCompareInit>
	
	/*	Struktur initalisieren
	*/
	memset( (Pulse_t*)&Signal , 0 , sizeof(Pulse_t) );
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	e6 e0       	ldi	r30, 0x06	; 6
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	df 01       	movw	r26, r30
 13e:	1d 92       	st	X+, r1
 140:	8a 95       	dec	r24
 142:	e9 f7       	brne	.-6      	; 0x13e <main+0x16>
	
    while (1) 
    {	
		if ( Signal.b0 )
 144:	ef e0       	ldi	r30, 0x0F	; 15
 146:	f1 e0       	ldi	r31, 0x01	; 1
		{
			if ( Signal.ulBeginn++ >= 300 )
 148:	c6 e0       	ldi	r28, 0x06	; 6
 14a:	d1 e0       	ldi	r29, 0x01	; 1
	*/
	memset( (Pulse_t*)&Signal , 0 , sizeof(Pulse_t) );
	
    while (1) 
    {	
		if ( Signal.b0 )
 14c:	80 81       	ld	r24, Z
 14e:	80 ff       	sbrs	r24, 0
 150:	fd cf       	rjmp	.-6      	; 0x14c <main+0x24>
		{
			if ( Signal.ulBeginn++ >= 300 )
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	ab 81       	ldd	r26, Y+3	; 0x03
 158:	bc 81       	ldd	r27, Y+4	; 0x04
 15a:	ac 01       	movw	r20, r24
 15c:	bd 01       	movw	r22, r26
 15e:	4f 5f       	subi	r20, 0xFF	; 255
 160:	5f 4f       	sbci	r21, 0xFF	; 255
 162:	6f 4f       	sbci	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	49 83       	std	Y+1, r20	; 0x01
 168:	5a 83       	std	Y+2, r21	; 0x02
 16a:	6b 83       	std	Y+3, r22	; 0x03
 16c:	7c 83       	std	Y+4, r23	; 0x04
 16e:	8c 32       	cpi	r24, 0x2C	; 44
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	50 f3       	brcs	.-44     	; 0x14c <main+0x24>
			{
				Signal.b0 = 0;
 178:	80 81       	ld	r24, Z
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	80 83       	st	Z, r24
				Signal.ulBeginn = 0;
 17e:	19 82       	std	Y+1, r1	; 0x01
 180:	1a 82       	std	Y+2, r1	; 0x02
 182:	1b 82       	std	Y+3, r1	; 0x03
 184:	1c 82       	std	Y+4, r1	; 0x04

				DEBUG_LED_PORT &= ~(1<<DEBUG_LED_BP);
 186:	2d 98       	cbi	0x05, 5	; 5
					
				if ( Signal.uiIndex == 11 )// Signal -> Anlage sperren
 188:	88 81       	ld	r24, Y
 18a:	8b 30       	cpi	r24, 0x0B	; 11
 18c:	b1 f4       	brne	.+44     	; 0x1ba <main+0x92>
				{
					SIGNAL_SPERREN_PORT |= (1<<SIGNAL_SPERREN_BP);
 18e:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	90 e7       	ldi	r25, 0x70	; 112
 194:	a2 e0       	ldi	r26, 0x02	; 2
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	a0 40       	sbci	r26, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x6e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x78>
 1a0:	00 00       	nop
					_delay_ms(50);
					SIGNAL_SPERREN_PORT &= ~(1<<SIGNAL_SPERREN_BP);
 1a2:	2b 98       	cbi	0x05, 3	; 5
 1a4:	bf ef       	ldi	r27, 0xFF	; 255
 1a6:	20 e7       	ldi	r18, 0x70	; 112
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	b1 50       	subi	r27, 0x01	; 1
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x82>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x8c>
 1b4:	00 00       	nop
					_delay_ms(50);
					Signal.uiIndex = 0;
 1b6:	18 82       	st	Y, r1
 1b8:	c9 cf       	rjmp	.-110    	; 0x14c <main+0x24>
				} else if	( Signal.uiIndex == 14 )// Signal -> Annahme
 1ba:	88 81       	ld	r24, Y
 1bc:	8e 30       	cpi	r24, 0x0E	; 14
 1be:	b1 f4       	brne	.+44     	; 0x1ec <main+0xc4>
				{
					SIGNAL_ANNAHME_PORT |= (1<<SIGNAL_ANNAHME_BP);
 1c0:	2c 9a       	sbi	0x05, 4	; 5
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	a0 e7       	ldi	r26, 0x70	; 112
 1c6:	b2 e0       	ldi	r27, 0x02	; 2
 1c8:	91 50       	subi	r25, 0x01	; 1
 1ca:	a0 40       	sbci	r26, 0x00	; 0
 1cc:	b0 40       	sbci	r27, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0xa0>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0xaa>
 1d2:	00 00       	nop
					_delay_ms(50);
					SIGNAL_ANNAHME_PORT &= ~(1<<SIGNAL_ANNAHME_BP);
 1d4:	2c 98       	cbi	0x05, 4	; 5
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0xb4>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xbe>
 1e6:	00 00       	nop
					_delay_ms(50);
					Signal.uiIndex = 0;
 1e8:	18 82       	st	Y, r1
 1ea:	b0 cf       	rjmp	.-160    	; 0x14c <main+0x24>
				} else if	( Signal.uiIndex >= 15 )// Signal -> Klingel
 1ec:	88 81       	ld	r24, Y
 1ee:	8f 30       	cpi	r24, 0x0F	; 15
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <main+0xcc>
 1f2:	ac cf       	rjmp	.-168    	; 0x14c <main+0x24>
				{
					SIGNAL_KLINGEL_PORT |= (1<<SIGNAL_KLINGEL_BP);
 1f4:	2a 9a       	sbi	0x05, 2	; 5
 1f6:	af ef       	ldi	r26, 0xFF	; 255
 1f8:	b0 e7       	ldi	r27, 0x70	; 112
 1fa:	22 e0       	ldi	r18, 0x02	; 2
 1fc:	a1 50       	subi	r26, 0x01	; 1
 1fe:	b0 40       	sbci	r27, 0x00	; 0
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0xd4>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0xde>
 206:	00 00       	nop
					_delay_ms(50);
					SIGNAL_KLINGEL_PORT &= ~(1<<SIGNAL_KLINGEL_BP);
 208:	2a 98       	cbi	0x05, 2	; 5
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	90 e7       	ldi	r25, 0x70	; 112
 20e:	a2 e0       	ldi	r26, 0x02	; 2
 210:	81 50       	subi	r24, 0x01	; 1
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	a0 40       	sbci	r26, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0xe8>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0xf2>
 21a:	00 00       	nop
					_delay_ms(50);
					Signal.uiIndex = 0;
 21c:	18 82       	st	Y, r1
 21e:	96 cf       	rjmp	.-212    	; 0x14c <main+0x24>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
