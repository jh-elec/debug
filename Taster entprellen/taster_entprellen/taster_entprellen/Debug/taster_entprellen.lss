
taster_entprellen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062f  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001723  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Switch.h"

#define CHANGE( X ) (*(uint8_t*)(0x3A) = X)

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	Switch_t Taster;
	
	//DDRA = 0xFF;
	*((uint8_t*)0x32) = 0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	82 bb       	out	0x12, r24	; 18
	
	DDRB = 1<<0;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	87 bb       	out	0x17, r24	; 23
    
	SwitchInit( &PORTD , 0x01 , &Taster );
  80:	ae 01       	movw	r20, r28
  82:	4f 5f       	subi	r20, 0xFF	; 255
  84:	5f 4f       	sbci	r21, 0xFF	; 255
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	82 e3       	ldi	r24, 0x32	; 50
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 57 00 	call	0xae	; 0xae <SwitchInit>
		SwitchRead( &Taster , &PORTD );	
		
		if ( Taster.Info & 1<<0 )
		{
			Taster.Info = 0;
			PORTB ^= 1<<0;
  90:	11 e0       	ldi	r17, 0x01	; 1
    
	SwitchInit( &PORTD , 0x01 , &Taster );
	
    while (1) 
    {
		SwitchRead( &Taster , &PORTD );	
  92:	62 e3       	ldi	r22, 0x32	; 50
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	0e 94 63 00 	call	0xc6	; 0xc6 <SwitchRead>
		
		if ( Taster.Info & 1<<0 )
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	80 ff       	sbrs	r24, 0
  a2:	f7 cf       	rjmp	.-18     	; 0x92 <main+0x26>
		{
			Taster.Info = 0;
  a4:	1b 82       	std	Y+3, r1	; 0x03
			PORTB ^= 1<<0;
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	81 27       	eor	r24, r17
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	f2 cf       	rjmp	.-28     	; 0x92 <main+0x26>

000000ae <SwitchInit>:
#include "Switch.h"

/* Prototypen */

void SwitchInit( volatile uint8_t *SwitchInPort , uint8_t SwitchMask , Switch_t *Switch )
{
  ae:	fa 01       	movw	r30, r20
	PORT_DDR_ADDR(SwitchInPort) &= ~(SwitchMask);
  b0:	dc 01       	movw	r26, r24
  b2:	8e 91       	ld	r24, -X
  b4:	96 2f       	mov	r25, r22
  b6:	90 95       	com	r25
  b8:	89 23       	and	r24, r25
  ba:	8c 93       	st	X, r24
	Switch->Old = 0;
  bc:	11 82       	std	Z+1, r1	; 0x01
	Switch->New = 0;
  be:	10 82       	st	Z, r1
	Switch->Info = 0;
  c0:	12 82       	std	Z+2, r1	; 0x02
	Switch->Mask = SwitchMask;
  c2:	63 83       	std	Z+3, r22	; 0x03
  c4:	08 95       	ret

000000c6 <SwitchRead>:
}

void SwitchRead( Switch_t *Switch , volatile uint8_t *SwitchInPort )
{
  c6:	fc 01       	movw	r30, r24
	Switch->New = ( PORT_PIN_ADDR(SwitchInPort) & Switch->Mask) ^ Switch->Mask;
  c8:	db 01       	movw	r26, r22
  ca:	12 97       	sbiw	r26, 0x02	; 2
  cc:	2c 91       	ld	r18, X
  ce:	20 95       	com	r18
  d0:	93 81       	ldd	r25, Z+3	; 0x03
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
	
	if (Switch->New != Switch->Old) // Eingang geaendert
  d6:	91 81       	ldd	r25, Z+1	; 0x01
  d8:	29 17       	cp	r18, r25
  da:	29 f0       	breq	.+10     	; 0xe6 <SwitchRead+0x20>
	{
		Switch->Info = Switch->Info | (Switch->New & (Switch->Old ^ Switch->New));
  dc:	90 95       	com	r25
  de:	92 23       	and	r25, r18
  e0:	82 81       	ldd	r24, Z+2	; 0x02
  e2:	98 2b       	or	r25, r24
  e4:	92 83       	std	Z+2, r25	; 0x02
	}
	
	Switch->Old = Switch->New;
  e6:	21 83       	std	Z+1, r18	; 0x01
  e8:	08 95       	ret

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
